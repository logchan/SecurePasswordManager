package hk.ust.ustac.team8.hashingscheme;

import hk.ust.ustac.team8.generalutility.LangUtility;

/**
 * A field that is a part of a scheme
 * Each field correspond to a salt at the hashing stage
 *
 * @author logchan
 * @see hk.ust.ustac.team8.hashingscheme.HashingScheme
 * @see hk.ust.ustac.team8.hashingscheme.HashingSchemeFieldType
 * @see hk.ust.ustac.team8.hashingscheme.HashingSchemeSaltingType
 */
public class HashingSchemeField {

    private HashingSchemeFieldType type;

    private String name;

    private String description;

    private HashingSchemeSaltingType saltingType;

    public String value;

    public HashingSchemeField(HashingSchemeFieldType type, String name, String description) {
        LangUtility.assertNonNull(type, "Null type provided for initialization of HashingSchemeField");
        LangUtility.assertNonNull(name, "Null name provided for initialization of HashingSchemeField");
        LangUtility.assertNonNull(description, "Null description provided for initialization of HashingSchemeField");

        this.type = type;
        this.name = name;
        this.description = description;
        this.value = "";
        this.saltingType = HashingSchemeSaltingType.APPEND;
    }

    public HashingSchemeFieldType getType() {
        return type;
    }

    public String getName() {
        return name;
    }

    public String getDescription() {
        return description;
    }

    public String getValue() {
        return value;
    }

    public HashingSchemeSaltingType getSaltingType() {
        return saltingType;
    }

    public void setName(String newName) {
        LangUtility.assertNonNull(newName, "Null new name provided for setName of HshingSchemeField");

        this.name = newName;
    }

    public void setDescription(String newDescription) {
        LangUtility.assertNonNull(newDescription, "Null new description provided for setDescription of HshingSchemeField");

        this.description = newDescription;
    }

    public void setType(HashingSchemeFieldType newType) {
        LangUtility.assertNonNull(newType, "Null new type provided for setType of HshingSchemeField");

        this.type = newType;
    }

    public void setValue(String newValue) {
        LangUtility.assertNonNull(newValue, "Null new value provided for setValue of HshingSchemeField");

        this.value = newValue;
    }

    public void setSaltingType(HashingSchemeSaltingType newSaltingType) {
        LangUtility.assertNonNull(newSaltingType, "Null new salting type provided for setSaltingType of HshingSchemeField");

        this.saltingType = newSaltingType;
    }

    /**
     * Generate a string for storing and restoring this field.
     * For detail, check the toStorageString() method in HashingScheme class.
     *
     * @return a string representation of the field (not including filled values)
     * @see hk.ust.ustac.team8.hashingscheme.HashingScheme
     */
    public String toStorageString() {
        StringBuilder builder = new StringBuilder();

        builder.append("name|");
        builder.append(name);
        builder.append('\n');

        builder.append("description|");
        builder.append(description);
        builder.append('\n');

        builder.append("type|");
        builder.append(type.toString());
        builder.append('\n');

        builder.append("saltingType|");
        builder.append(saltingType.toString());
        builder.append('\n');

        return builder.toString();
    }

    /**
     * Parse a string generated by toStorageString() to a field.
     *
     * @param input the input to be parsed
     * @return a scheme parsed from the input string representation
     * @see hk.ust.ustac.team8.hashingscheme.HashingScheme
     */
    public static HashingSchemeField fromStorageString(String input) {
        HashingSchemeField field = new HashingSchemeField(HashingSchemeFieldType.STRING, "", "");
        String[] lines = input.split("[\\r\\n]+");

        for (int i = 0; i < lines.length; ++i) {
            String line = lines[i];

            if (line.startsWith("name|")) {
                field.setName(line.substring(5));
            }
            else if (line.startsWith("description|")) {
                field.setDescription(line.substring(12));
            }
            else if (line.startsWith("type|")) {
                field.setType(Enum.valueOf(HashingSchemeFieldType.class, line.substring(5)));
            }
            else if (line.startsWith("saltingType|")) {
                field.setSaltingType(Enum.valueOf(HashingSchemeSaltingType.class, line.substring(12)));
            }
        }

        return field;
    }
}
